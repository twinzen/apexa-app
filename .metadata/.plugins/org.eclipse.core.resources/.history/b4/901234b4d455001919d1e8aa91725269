package com.twinzom.apexa.tools.datageneration.txn;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.twinzom.apexa.tools.common.Util;
import com.twinzom.apexa.tools.datageneration.pricehistory.PriceHistory;
import com.twinzom.apexa.tools.datageneration.pricehistory.SecurityPrice;
import com.twinzom.apexa.tools.datageneration.ratehistory.RateHistory;

public class TxnGenerator {
	
	static SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	static Double CHARGE = 0.05;

	public static void main(String[] args) throws ClassNotFoundException, SQLException, ParseException, JsonProcessingException {
		
		String myUrl = "jdbc:mysql://apexa.cfyzdksiv9zy.eu-west-2.rds.amazonaws.com:3306/apexa";
		Class.forName("com.mysql.cj.jdbc.Driver");
		Connection dbConn = DriverManager.getConnection(myUrl, "apexa", "apexa.123");
		//dbConn.setAutoCommit(false);

		Map<String, Map<String, PriceHistory>> priceHistorys = getPriceHistorys(dbConn);
		
		Map<String, Map<String, RateHistory>> rateHistorys = getRateHistorys(dbConn);
		
		List<String> secCdes = new ArrayList<String>(priceHistorys.keySet());
		
		List<Date> weekDays = Util.getWeekDays(sdf.parse("2018-03-19"), sdf.parse("2019-04-02"));
		
		List<Transaction> txns = generate(1L, secCdes, weekDays, priceHistorys, rateHistorys, 2, 10);
		
		ObjectMapper om = new ObjectMapper();
		
		System.out.println(om.writerWithDefaultPrettyPrinter().writeValueAsString(txns));
		
	}
	
	public static List<Transaction> generate (
				Long acid,
				List<String> secCdes,
				List<Date> weekDays,
				Map<String, Map<String, PriceHistory>> priceHistorys,
				Map<String, Map<String, RateHistory>> rateHistorys,
				int numOfHolding,
				int numOfTxn
			) {
		
		List<String> secPicked = pickSecs (secCdes, numOfHolding);
		
		List<Transaction> txns = new ArrayList<Transaction>();
		
		int seq = 0;
		
		for (String secCde : secPicked) {
			
			if (seq > 9)
				seq = 1;
			
			List<Date> datePicked = pickDates(weekDays, numOfTxn);
			double totalQty = 0;
			int buySellHalf = 0;
			
			for (Date d : datePicked) {
				
				if(totalQty == 0) 
					buySellHalf = 0;
				else
					buySellHalf = pickBuySelHalf();
				
				PriceHistory prcHist = priceHistorys.get(secCde).get(sdf.format(d));
				String ccy = prcHist.getCcy();
				double price = prcHist.getPrc();
				Long secid = prcHist.getSecid();
				
				double rate = 1;
				if (ccy != "HKD")
					rate = rateHistorys.get(ccy).get(sdf.format(d)).getRate();
				
				String txnRef = System.currentTimeMillis()+""+seq;
				
				switch (buySellHalf) {
					case 0:
						double qty = pickQty();
						txns.add(generateBuy(acid, txnRef, d, secid, rate, price, ccy, qty));
						totalQty += qty;
						break;
					case 1:
						txns.add(generateSell(acid, txnRef, d, secid, rate, price, ccy, totalQty));
						totalQty = 0;
					case 2:
						txns.add(generateSell(acid, txnRef, d, secid, rate, price, ccy, totalQty/2));
						totalQty = totalQty/2;
						break;
					default:
				}
				seq++;
			}
		}
		
		return txns;
		
	}
	
	public static Transaction generateBuy (Long acid, String txnRef, Date d, Long secid, double rate, double price, String ccy, double qty) {
		
		Transaction txn = new Transaction();
		double prip = qty*price;
		double bkcost = qty * price * (1+CHARGE);
		
		txn.setTxnTypeCde("SI");
		txn.setExtTxnRef(txnRef);
		txn.setExtTxnTypeCde("BUY");
		txn.setAcid(acid);
		txn.setSecid(secid);
		txn.setExeDtTm(d);
		txn.setPostDtTm(new Date(System.currentTimeMillis()));
		txn.setExePrc(price);
		txn.setPrcCcy(ccy);
		txn.setQty(qty);
		txn.setPripAmtLocl(prip);
		txn.setSetlDtTm(d);
		txn.setSetlCcy("HKD");
		txn.setSetlAmtSetl(bkcost*rate);
		txn.setSetlLoclRate(rate);
		txn.setMktCde("HK");
		txn.setSrcSysCde("PATCH");
		txn.setCfmInd("S");
		txn.setLongShtInd("L");
		txn.setMktValLocl(prip);
		txn.setMktValAcct(prip*rate);
		txn.setBkCostLocl(bkcost);
		txn.setBkCostAcct(bkcost*rate);
		
		return txn;
		
	}
	
public static Transaction generateSell (Long acid, String txnRef, Date d, Long secid, double rate, double price, String ccy, double qty) {
		
		Transaction txn = new Transaction();
		double prip = qty*price;
		double bkcost = qty * price * (1-CHARGE);
		
		txn.setTxnTypeCde("SOPL");
		txn.setExtTxnRef(txnRef);
		txn.setExtTxnTypeCde("SELL");
		txn.setAcid(acid);
		txn.setSecid(secid);
		txn.setExeDtTm(d);
		txn.setPostDtTm(new Date(System.currentTimeMillis()));
		txn.setExePrc(price);
		txn.setPrcCcy(ccy);
		txn.setQty(qty);
		txn.setPripAmtLocl(prip);
		txn.setSetlDtTm(d);
		txn.setSetlCcy("HKD");
		txn.setSetlAmtSetl(bkcost*rate);
		txn.setSetlLoclRate(rate);
		txn.setMktCde("HK");
		txn.setSrcSysCde("PATCH");
		txn.setCfmInd("S");
		txn.setLongShtInd("L");
		txn.setMktValLocl(prip);
		txn.setMktValAcct(prip*rate);
		txn.setBkCostLocl(bkcost);
		txn.setBkCostAcct(bkcost*rate);
		
		return txn;
		
	}
	
	public static int pickBuySelHalf () {
		int num = (int) (Math.random() * 21);
		
		if (num >= 19)
			return 2;
		else if (num >= 17)
			return 1;
		else 
			return 0;
	}
	
	public static List<String> pickSecs (List<String> secCdes, int numOfHolding) {
		List<String> secPicked = new ArrayList<String>();
		
		while (secPicked.size() < numOfHolding) {
			int index = (int) (Math.random() * secCdes.size());
			if (!secPicked.contains(secCdes.get(index))) {
				secPicked.add(secCdes.get(index));
			}
		}
		
		Collections.sort(secPicked);
		
		return secPicked;
	}
	
	public static double pickQty () {
		
		return ((int) (Math.random() * 20) + 5) * 1000;
	}
	
	
	public static List<Date> pickDates (List<Date> weekDays, int numOfDate) {
		
		List<Date> datePicked = new ArrayList<Date>();
		
		while (datePicked.size() < numOfDate) {
			
			int index = (int) (Math.random() * weekDays.size());
			if (!datePicked.contains(weekDays.get(index))) {
				datePicked.add(weekDays.get(index));
			}
		}
		
		Collections.sort(datePicked);
		
		return datePicked;
		
	}
	
	public static Map<String, Map<String, PriceHistory>> getPriceHistorys (Connection dbConn) throws SQLException {
		
		Map<String, Map<String, PriceHistory>> priceHistorys = new HashMap<String, Map<String, PriceHistory>>();
		
		Statement stmt = dbConn.createStatement();
		ResultSet rs = stmt.executeQuery("select * from sec_prc_hist");
		while (rs.next()) {
		  PriceHistory prcHist = new PriceHistory();
		  prcHist.setSecid(rs.getLong("secid"));
		  prcHist.setSecCde(rs.getString("sec_cde"));
		  prcHist.setCcy(rs.getString("ccy"));
		  prcHist.setPrc(rs.getDouble("prc"));
		  prcHist.setPrcDt(rs.getDate("prc_dt"));
		  
		  Map<String, PriceHistory> prcMap = priceHistorys.get(prcHist.getSecCde());
			if (prcMap == null) {
				prcMap = new HashMap<String, PriceHistory>();
				priceHistorys.put(prcHist.getCcy(), prcMap);
			}
			
			prcMap.put(sdf.format(prcHist.getPrcDt()), prcHist);
		  
		}
		
		return priceHistorys;

	}
	
	public static Map<String, Map<String, RateHistory>> getRateHistorys (Connection dbConn) throws SQLException {
		
		Map<String, Map<String, RateHistory>> rateHistorys = new HashMap<String, Map<String, RateHistory>>();
		
		Statement stmt = dbConn.createStatement();
		ResultSet rs = stmt.executeQuery("select * from rate_hist");
		while (rs.next()) {
			RateHistory rateHist = new RateHistory();
			rateHist.setCcy(rs.getString("ccy"));
			rateHist.setRate(rs.getDouble("rate"));
			rateHist.setRateDt(rs.getDate("rate_dt"));
			
			Map<String, RateHistory> ccyMap = rateHistorys.get(rateHist.getCcy());
			if (ccyMap == null) {
				ccyMap = new HashMap<String, RateHistory>();
				rateHistorys.put(rateHist.getCcy(), ccyMap);
			}
			
			ccyMap.put(sdf.format(rateHist.getRateDt()), rateHist);
		}
		
		return rateHistorys;

	}
 	
}
