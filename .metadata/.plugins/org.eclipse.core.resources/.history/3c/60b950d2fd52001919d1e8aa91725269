package com.twinzom.apexa.apis;

import java.util.concurrent.Executor;

import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;



@SpringBootApplication
@EnableAsync
public class Application {

	public static void main(String[] args) {
		SpringApplication.run(Application.class, args);
	}
	
	@Bean(name = "taskExecutor1")
	public Executor taskExecutor1 () {
		
		ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
		executor.setCorePoolSize(1000);
		executor.setMaxPoolSize(1000);
		executor.setQueueCapacity(5000);
		executor.setThreadNamePrefix("CalEng-");
		executor.initialize();
		return executor;
	}
	
	@Bean(name = "taskExecutor2")
	public Executor taskExecutor2 () {
		
		ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
		executor.setCorePoolSize(1000);
		executor.setMaxPoolSize(1000);
		executor.setQueueCapacity(5000);
		executor.setThreadNamePrefix("CalEng-");
		executor.initialize();
		return executor;
	}
	
	public PoolingHttpClientConnectionManager poolingConnectionManager() {
		
		PoolingHttpClientConnectionManager connManager 
			= new PoolingHttpClientConnectionManager();
		connManager.setMaxTotal(1000);
		connManager.setDefaultMaxPerRoute(1000);
		return connManager;
		
	}

}
